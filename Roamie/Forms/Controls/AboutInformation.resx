<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="IconPBOX.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        nembp3LdCq0AAAAASUVORK5CYII=
</value>
  </data>
</root>